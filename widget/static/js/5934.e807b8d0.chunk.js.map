{"version":3,"file":"static/js/5934.e807b8d0.chunk.js","mappings":"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","sources":["app/Themes/SquarePhoto/Elements/Card.js","app/Themes/SquarePhoto/index.js"],"sourcesContent":["import React, { Suspense, useRef, useEffect } from \"react\";\nimport { PostTrimContent, themeImpressionTracking } from '../../../../utils'\nimport { suiteTrack } from '../../../../actions/api'\nconst AuthorDetails = React.lazy(() => import(\"./AuthorDetails\"));\nconst Media = React.lazy(() => import('./Media'));\nconst PostContent = React.lazy(() => import('../../Elements/PostContent/PostContent'));\n\nconst trim_content_length = 200;\nconst Card = ({ itemData, personalization, adjustWidth, ThemeRule, clickToShowPopUp, itemIndex, wallID, ownerId, postSizeInPx }) => {\n  const postTrack = useRef(null);\n  const mediaType = (itemData.type === 2 || itemData.type === 3 || itemData.type === 4 || itemData.type === 5) ? true : false;\n  const postTextContent = personalization.trimcontent ? PostTrimContent(itemData.content, trim_content_length) : itemData.content\n  const responsiveCardSize2x = postSizeInPx.adjustWidth < 250 ? true : false\n  useEffect(() => {\n    if (suiteTrack) themeImpressionTracking(postTrack);\n  }, []);\n  return <div id={`tb-sp-post-${itemData.id}`} className={`tb_sp_post_wrapper${responsiveCardSize2x ? ' tb_sp_post_wrapper2x' : ''}`} style={{ width: `${adjustWidth}%`, padding: personalization.padding / 2 }} tb-network={itemData.network.id} tabIndex=\"0\" role=\"article\" aria-label={`Post ${parseInt(itemIndex) + 1},${postTextContent}`} ref={postTrack} post-id={itemData.referenceId ? itemData.referenceId : itemData.id} feed-id={itemData.feedId}>\n    <div className=\"tb_sp_post_in\" onClick={clickToShowPopUp(itemIndex, itemData)}>\n      <div className=\"tb_sp_post_media_wrapp\">\n        {mediaType ? <Suspense fallback={<></>}><Media key={`img${itemIndex}_${itemData.id}`} itemData={itemData} wallID={wallID} ownerId={ownerId} ThemeID={personalization.widgetTheme} /></Suspense> : ''}\n        <div className=\"tb_sp_post_details\">\n          <div className=\"tb_sp_contant_wrapper\">\n            {!itemData.hideContent ? <Suspense fallback={<></>}><PostContent contentClass={'tb_sp_content'} item={itemData} content={postTextContent} font={itemData.font} ThemeRule={ThemeRule} personalization={personalization} contentTitle={itemData.contentTitle} /></Suspense> : ''}\n          </div>\n          <Suspense fallback={<></>}><AuthorDetails ownerId={ownerId} postTime={itemData.createdAt} author={itemData.author} network={itemData.network} font={itemData.font} personalization={personalization} ThemeRule={ThemeRule} /></Suspense>\n        </div>\n        <div className=\"tb_sp_post_overlay\" style={{ backgroundColor: ThemeRule.cardColor }}><div></div></div>\n      </div>\n    </div>\n  </div>\n}\nexport default Card","import React, { PureComponent } from \"react\";\nimport Card from \"./Elements/Card\";\nimport { connect } from 'react-redux';\nimport { managePostHeight } from '../../../actions/themeActions';\nimport \"./scss/SquarePhoto.scss\";\nclass SquarePhoto extends PureComponent {\n  state = {\n    postData: []\n  }\n  \n  render() {\n    const { postData, completeDataObject, adjustWidth, wall, clickToShowPopUp, cardNumber, onClickToCTA, postSizeInPx } = this.props;\n    let totalPostBestFit = postData.length;\n    if (wall && wall.Personalization.fitRow == 1) {\n      if (postData.length >= parseInt(cardNumber)) {\n        let bestFitEachRow = postData.length / parseInt(cardNumber);\n        totalPostBestFit = (parseInt(cardNumber) * parseInt(bestFitEachRow));\n      }\n    }\n    return (\n      <div tabIndex=\"0\" aria-label={`There are ${(postData && postData.length > 0) ? postData.length : 0} posts in the feed`} role=\"feed\" className=\"tb_sp_post_container\">\n        {(postData && postData.length > 0) && postData.map((item, index) => {\n          const cardData = completeDataObject[item];\n          return parseInt(totalPostBestFit) >= parseInt((index + 1)) ? <Card ownerId={wall.Wall.owner} itemData={cardData} key={`sqr_crd_${index}_${item.id}`} itemIndex={index} adjustWidth={cardData.highlight == 1 ? adjustWidth * 2 : adjustWidth} personalization={wall.Personalization} ThemeRule={wall.ThemeRule} wallID={wall.Wall.id} clickToShowPopUp={clickToShowPopUp} onClickToCTA={onClickToCTA} postSizeInPx={postSizeInPx} />\n            : null\n        })}\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    postHeight: state.postHeight.data\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    managePostHeight: (data) => dispatch(managePostHeight(data))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SquarePhoto)"],"names":["AuthorDetails","React","Media","PostContent","itemData","personalization","adjustWidth","ThemeRule","clickToShowPopUp","itemIndex","wallID","ownerId","postSizeInPx","postTrack","useRef","mediaType","type","postTextContent","trimcontent","PostTrimContent","content","responsiveCardSize2x","useEffect","suiteTrack","themeImpressionTracking","id","className","style","width","padding","network","tabIndex","role","parseInt","ref","referenceId","feedId","onClick","Suspense","fallback","ThemeID","widgetTheme","hideContent","contentClass","item","font","contentTitle","postTime","createdAt","author","backgroundColor","cardColor","SquarePhoto","PureComponent","state","postData","render","completeDataObject","wall","cardNumber","onClickToCTA","this","props","totalPostBestFit","length","Personalization","fitRow","bestFitEachRow","map","index","cardData","Wall","owner","highlight","connect","postHeight","data","dispatch","managePostHeight"],"sourceRoot":""}