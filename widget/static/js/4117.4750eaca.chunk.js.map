{"version":3,"file":"static/js/4117.4750eaca.chunk.js","mappings":"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","sources":["app/Themes/Atmosphere/Elements/Card.js","app/Themes/Atmosphere/Focus/index.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\nimport AuthorDetails from \"../../Elements/AuthorDetails\";\nimport PostContent from \"../../Elements/PostContent/PostContentDisplay\";\nimport Media from \"../../Elements/Media\";\nimport InteractiveEmoji from \"../../Elements/InteractiveEmoji\";\nexport default class Card extends PureComponent {\n  state = {\n    themeHeightMange: this.props.themeHeight,\n    randomkey: 0,\n    wHeight: window.innerHeight,\n  };\n\n  componentDidMount() {\n\n    const { wall } = this.props;\n\n    if (wall.isDisplay) {\n       window.addEventListener(\"resize\", () => this.setState({ wHeight: window.innerHeight },() => this.onFullscreenChange));\n       document.addEventListener(\"fullscreenchange\",  this.onFullscreenChange, false);\n       this.heightManage();\n    }\n  }\n\n  heightManage=(e=0)=>{\n     this.setState({ themeHeightMange: this.props.themeHeight, randomkey: e ? Math.random() : 0 })\n     this.props.heightUpdate();\n  }\n\n  onFullscreenChange = () => setTimeout(() => this.heightManage(1), 100)\n\n  componentDidUpdate(prev,preState) {\n\n    const { wall } = this.props;\n\n    if (wall.isDisplay) {\n      if (wall.isEditor && wall.Banner.bannerUpdate!= prev.wall.Banner.bannerUpdate || wall.Banner.banner_position!=prev.wall.Banner.banner_position || wall.BannerImage.status!=prev.wall.BannerImage.status) this.onFullscreenChange()\n      else this.heightManage()\n    }\n  }\n\n\n  render() {\n    const { row, itemData, clickToShowPopUp, itemIndex, largeBlock, wall, intractiveData } = this.props;\n\n    const { ThemeRule, Personalization } = wall;\n\n    const { themeHeightMange, wHeight } = this.state;\n\n    const mediaType = [2, 3, 4, 5].includes(itemData.type) ? true : false;\n       \n    const overlayStyle = { backgroundColor: ThemeRule.cardColor };\n\n    const interactive = wall.Personalization.interactive;\n\n    const rows = wall.isDisplay\n      ? [17, 13].includes(ThemeRule.numberOfCoumn)\n        ? 4\n        : [5, 7, 0].includes(ThemeRule.numberOfCoumn)\n          ? 2\n          : 3\n      : 0;\n\n    const cardHeight = wall.isDisplay ? (wHeight - themeHeightMange) / rows  : 0;\n \n    const carSize = {\n      padding: `${ThemeRule.padding / 2}px`,\n      height: cardHeight\n        ? itemIndex || wall.MobileView\n          ? `${cardHeight}px`\n          : `calc(100vh - ${themeHeightMange}px)`\n        : \"\",\n    };\n\n\n    return itemData && itemData.id ? (\n      <div\n        id={`tb-sp-post-${itemData.id}${row}`}\n        className={`tb-sp-post-${itemData.id} tb_ap_post_wrapper ${wall.isDisplay ? \"in-left\" : \"\"} ${interactive ? 'intractive_on' : ''}`}\n        tb-network={itemData.network.id}\n        style={carSize}\n      >\n        <div\n          className=\"tb_ap_post_in\"\n          onClick={clickToShowPopUp(itemIndex, itemData)}>\n          <div id={`media-outer-${itemData.id}`}\n            className=\"tb_ap_post_media_wrapp\"\n            style={{ borderRadius: `${ThemeRule.borderRadius}px` }}\n          >\n\n            {mediaType ? (\n               <Media itemData={itemData}  wall={wall} />\n            ) : (\n              \"\"\n            )}\n            <div\n              className=\"overlay-main\">\n              {!ThemeRule.captionStatus ? (\n                <div className=\"tb_ap_post_details postContentCard\">\n                  <AuthorDetails  postData={itemData} ThemeRule={ThemeRule}  />\n                  <div\n                    className=\"tb_ap_contant_wrapper post-card-outer\"\n                    style={{ padding: `${ThemeRule.spacing}px` }}\n                  >\n                    {!ThemeRule.hideContent ? (\n                      <PostContent\n                        wall={wall}\n                        largeBlock={largeBlock}\n                        item={itemData}\n                        ThemeRule={ThemeRule}\n                        personalization={Personalization}\n                      />\n                    ) : (\n                      \"\"\n                    )}\n                  </div>\n                </div>\n              ) : null}\n\n              <div className=\"tb_ap_post_overlay\" style={overlayStyle}>\n                <div></div>\n              </div>\n            </div>\n            {\n              !wall.isDisplay && interactive ?\n              <InteractiveEmoji {...{ isCard: true, postId: itemData.id, intractiveData, userDetail: wall.UserDetail, wallId: wall.Wall, interactiveCount: itemData.interactiveCount, isDisplay: wall.isDisplay, interactive: interactive, interactiveStatus: wall.Personalization.interactiveStatus}} key={(Math.random() * itemData.id)}/> : null\n            } \n          </div>\n        </div>\n      </div>\n    ) : null;\n  }\n}","import React, { PureComponent } from \"react\";\nimport Card from \"../Elements/Card\";\nimport { connect } from \"react-redux\";\nimport { managePostHeight } from \"../../../../actions/themeActions\";\nimport \"aos/dist/aos.css\";\nimport \"./assets/css/mashup-style.css\";\nimport { autoSizeText, checkMobileView, getTotalRows } from \"../../../../utils\";\nconst MobileView = checkMobileView();\n \nconst updateNewData = (postList, length)  =>{\n  let result = [];\n  for(let i=0; i <length; i++) result.push(postList[getRandomIndex(0, postList.length - 1)]);\n  return result;\n}\n\nfunction getRandomIndex(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst animation = (data, row, wall, self) => {\n\n      const { ThemeRule } = wall;\n      let currentRow = row-1;\n      let postData = data[currentRow];\n\n        for (let i=0; i < postData.length; i++) {\n\n           updateClass = setTimeout(() => {\n            \n            const refDiv = document.getElementById(`tb-sp-post-${postData[i].id}${currentRow}`);\n\n            if(refDiv){\n\n            const refDiv1 = refDiv.querySelector(\".tb_ap_post_in .tb_ap_post_media_wrapp\");\n\n             Array.from(document.querySelectorAll(\".tb_ap_post_media_wrapp\")).map((x) => x.classList.remove(\"zoom-in-effect\"));\n             Array.from(document.querySelectorAll(\".overlay-main\")).map((x) => x.classList.remove(\"aos-init\",  \"start\"));\n         \n            if(!ThemeRule.hideContent || ThemeRule.postAuthor || ThemeRule.postTime || ThemeRule.socialAction) {\n              refDiv1.classList.add(\"zoom-in-effect\");\n              refDiv1.children[1].classList.add(\"aos-init\", \"start\");\n              autoSizeText(`${postData[i].id}${currentRow}`, 1)}\n\n                  if(postData.length==(i+1)){\n                    let nextRow = (row)== data.length ? 1 : row + 1;\n                    self.getAnimation(data, nextRow)\n                  }\n                }\n                \n              },(i + 1) * (ThemeRule.slideDelay && ThemeRule.slideDelay >= 3 ? ThemeRule.slideDelay * 1000 : 3000))\n          }\n      };\n\n  const CardCom = React.memo(({ wall, itemIndex, row, clickToShowPopUp, onClickToCTA, itemData, largeBlock, heightUpdate, themeHeight, intractiveData }) => {\n\n    return (\n      <Card\n        row={row} \n        wall={wall}\n        heightUpdate={heightUpdate}\n        themeHeight={themeHeight}\n        itemData={itemData}\n        key={itemIndex}\n        largeBlock={largeBlock}\n        itemIndex={itemIndex}\n        clickToShowPopUp={clickToShowPopUp}\n        onClickToCTA={onClickToCTA}\n        intractiveData={intractiveData}\n      />\n    );\n  })\n\nvar timeOutHandle;\nvar updateClass;\nvar updateHeight;\n\nclass Atmosphere extends PureComponent {\n\n   constructor(props){\n      super(props)\n      this.state = {\n        postData: [],\n        postDataUpdate: [],\n        count: 1,\n        key: 1,\n        checkThemeheight: props.wall.isDisplay ? false : true\n      };\n   }\n \n\n  componentDidMount() {\n    const { postData, wall } = this.props;\n    this.setState({ postData }, () => this.onLoadMasonry());\n    this.dataFilter();\n    if (wall.isDisplay)  this.themeheight(); \n   }\n\n\n  themeheight = () => {\n      updateHeight= setTimeout(() => {\n        this.props.heightUpdate();\n        this.setState({ checkThemeheight: true });\n      }, 200);\n  };\n\n\n  \n   componentDidUpdate(prev,previustate){\n\n      const { wall } = this.props;\n      const { postDataUpdate,key } = this.state;\n\n       if(wall.isDisplay && wall.isEditor && (wall.product!= prev.wall.product ||  wall.Banner.bannerUpdate!= prev.wall.Banner.bannerUpdate || wall.Banner.banner_position!=prev.wall.Banner.banner_position || wall.BannerImage.status!=prev.wall.BannerImage.status  || (this.props.themeUpdate!=prev.themeUpdate)))  this.props.heightUpdate();\n         if(wall.isDisplay && previustate.postDataUpdate.length!=postDataUpdate.length && key==1)  this.getAnimation(postDataUpdate,1)\n     }\n\n    getAnimation=(postDataUpdate,key)=>{\n\n      const { wall } = this.props;\n      const self= this;\n        updateClass = setTimeout(() => {\n            const tb_ap_post_row = document.querySelectorAll('.tb_ap_post_row')\n              if(tb_ap_post_row){\n                tb_ap_post_row.forEach(el => el.style.display = \"none\");\n\n                 const tb_ap_post_row_key =  document.querySelector(`.tb_ap_post_row${key-1}`)\n\n                 if(tb_ap_post_row_key){\n\n                  document.querySelector(`.tb_ap_post_row${key-1}`).style.display = \"block\";\n                  animation(postDataUpdate,key,wall,self)\n                  \n                  let mediaRow = postDataUpdate[key-1];\n                  let medias = document.querySelectorAll('video');\n\n                  if(medias) medias.forEach(function(media) { media.pause() })\n                    if(mediaRow){\n                      mediaRow.forEach(function(data,key) {\n                        setTimeout(() => {\n                            let mediablock = document.querySelector(`.mediaHolder${data.id} .card_video__01 video`);\n                            mediablock && mediablock.play()\n                        }, 1500*(key+1))\n                      })\n                    }\n                }    \n            }     \n        }, 5000);\n        return () => clearTimeout(timeOutHandle);\n    }\n\n  dataFilter = () => {\n    const { postData, wall } = this.props;\n\n    const columnData = wall.isDisplay ? MobileView == 1 ? 4 : MobileView == 2 ? 6 : wall.ThemeRule.numberOfCoumn ? wall.ThemeRule.numberOfCoumn : 7 : 7;\n    const getPostdata = postData && postData.length > 0 && postData.map((item, index) => this.props.completeDataObject[item]);\n\n    const initialData = (getPostdata && Object.keys(getPostdata).length > 0) && getPostdata.map((item, index) => index < columnData ? { ...item, stopAnimation: true } : item);\n\n    const filterData = (initialData && Object.keys(initialData).length > 0) && initialData.filter((item, index) => (item.file && item.file !='') && item);\n    let NewpostData = getTotalRows(filterData, columnData);\n    let lastPosts = NewpostData.length > 0 ? NewpostData[NewpostData.length - 1]: 0;\n    if(filterData && lastPosts.length < columnData){\n      const newData = updateNewData(filterData, columnData - lastPosts.length);\n      NewpostData[NewpostData.length - 1] = [...lastPosts, ...newData];\n    }\n\n    this.setState({ postDataUpdate: NewpostData });\n  };\n\n\n  onLoadMasonry = () => {\n    var span = document.querySelector(\".tb_ap_post_container\");\n    if (span)  this.props.managePostHeight(span.style.height); \n  };\n\n  componentWillReceiveProps(nextProps) {\n    const { postData } = nextProps;\n    this.setState({ postData }, () => {\n      if (!this.props.wall.isDisplay) this.dataFilter();\n    });\n  }\n\n  componentWillUnmount(){\n    if(timeOutHandle) clearTimeout(timeOutHandle);\n    if(updateClass) clearTimeout(updateClass);\n    if(updateHeight) clearTimeout(updateHeight);\n  }\n\n  render() {\n    const { wall, clickToShowPopUp, onClickToCTA, heightUpdate, themeHeight, intractiveData } =this.props;\n    const { postDataUpdate, checkThemeheight } = this.state;\n\n \n    return  checkThemeheight && postDataUpdate && postDataUpdate.length > 0 ? (\n        <div id=\"focus_68\" className={`tb_ap_post_container ${!wall.isDisplay ? 'embed focus-embed' : '' } clearfix`}>\n \n       {postDataUpdate.map((data,inDex)=>{\n\n         return (<div  className={`tb_ap_post_row ${wall.isDisplay ? `tb_ap_post_row${inDex}` : ''} `} style={{ display: inDex==0 || !wall.isDisplay ? 'block' : 'none'}}>\n\n           { !MobileView || !wall.isDisplay ? \n            <div key={inDex} className={`tb_ap_post_large`}>\n              {<div\n                  id={postDataUpdate[inDex][0]?.id}\n                  row={inDex}\n                  index={1}\n                  completeAnimation={postDataUpdate[inDex].length}\n                  wall={wall}>\n                  <CardCom\n                    heightUpdate={heightUpdate}\n                    themeHeight={themeHeight}\n                    row={inDex}\n                    wall={wall}\n                    itemIndex={0}\n                    clickToShowPopUp={clickToShowPopUp}\n                    onClickToCTA={onClickToCTA}\n                    itemData={postDataUpdate[inDex][0]}\n                    largeBlock={true} intractiveData={intractiveData}/>\n                </div>\n              }\n            </div> : null  }\n\n            <div className={`tb_ap_post_small ${wall.isDisplay ? `cards_${wall.ThemeRule.numberOfCoumn || 7}` : ''}`}>\n              {postDataUpdate[inDex].map((itemData, indexData) => {\n                return indexData == 0 && ![1,2].includes(MobileView) ? null : (\n                  <div\n                    id={itemData?.id}\n                    row={inDex}\n                    index={indexData + 1}\n                    //completeAnimation={postDataUpdate[inDex].length}\n                    wall={wall}\n                    largeBlock={false}>\n                     <CardCom\n                        wall={wall}\n                        row={inDex}\n                        heightUpdate={heightUpdate}\n                        themeHeight={themeHeight}\n                        itemIndex={indexData}\n                        clickToShowPopUp={clickToShowPopUp}\n                        onClickToCTA={onClickToCTA}\n                        itemData={itemData} intractiveData={intractiveData}/>\n                  </div>\n                );\n              })}\n            </div> \n            </div>)\n\n          })}\n\n        </div>\n      ) : null\n   \n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    managePostHeight: (data) => dispatch(managePostHeight(data)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(React.memo(Atmosphere));"],"names":["Card","PureComponent","state","themeHeightMange","this","props","themeHeight","randomkey","wHeight","window","innerHeight","heightManage","e","setState","Math","random","heightUpdate","onFullscreenChange","setTimeout","componentDidMount","wall","isDisplay","addEventListener","document","componentDidUpdate","prev","preState","isEditor","Banner","bannerUpdate","banner_position","BannerImage","status","render","row","itemData","clickToShowPopUp","itemIndex","largeBlock","intractiveData","ThemeRule","Personalization","mediaType","includes","type","overlayStyle","backgroundColor","cardColor","interactive","rows","numberOfCoumn","cardHeight","carSize","padding","height","MobileView","id","className","network","style","onClick","borderRadius","Media","captionStatus","AuthorDetails","postData","spacing","hideContent","item","personalization","InteractiveEmoji","isCard","postId","userDetail","UserDetail","wallId","Wall","interactiveCount","interactiveStatus","key","checkMobileView","getRandomIndex","min","max","ceil","floor","CardCom","React","onClickToCTA","timeOutHandle","updateClass","updateHeight","Atmosphere","constructor","super","themeheight","checkThemeheight","getAnimation","postDataUpdate","self","tb_ap_post_row","querySelectorAll","forEach","el","display","querySelector","data","currentRow","i","length","refDiv","getElementById","refDiv1","Array","from","map","x","classList","remove","postAuthor","postTime","socialAction","add","children","autoSizeText","nextRow","slideDelay","animation","mediaRow","medias","media","pause","mediablock","play","clearTimeout","dataFilter","columnData","getPostdata","index","completeDataObject","initialData","Object","keys","stopAnimation","filterData","filter","file","NewpostData","getTotalRows","lastPosts","newData","postList","result","push","updateNewData","onLoadMasonry","span","managePostHeight","count","previustate","product","themeUpdate","componentWillReceiveProps","nextProps","componentWillUnmount","inDex","completeAnimation","indexData","connect","dispatch"],"sourceRoot":""}