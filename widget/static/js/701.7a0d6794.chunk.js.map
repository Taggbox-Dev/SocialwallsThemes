{"version":3,"file":"static/js/701.7a0d6794.chunk.js","mappings":"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","sources":["app/Components/announcementOverlay/index.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { setIntervalFunction, AnnouncementsUtils } from '../../../utils'\nimport { CloudHostUrl } from '../../../constants';\nimport './announcementsOverlay.css'\n\nconst styles = {\n    wAnnouncementsOverLay: { position: \"fixed\", zIndex: 99999, top: 0, right: 0, bottom: 0, left: 0 },\n    blurBg: { position: \"absolute\" },\n    backgroundWhite: { backgroundColor: \"white\" },\n    setFont: { fontSize: 24, color: \"black\" }\n}\n\nexport default class AnnouncementsOverlayView extends PureComponent {\n\n    state = {\n        announcementData: null,\n        announcementDataKeys: null,\n        timeStamp: Math.floor(Date.now() / 1000),\n        imageError: false\n    }\n\n    componentDidMount() {\n        this.onLoadAnnouncements()\n    }\n    timeInterval = null\n    onLoadAnnouncements = () => {\n        const { newApi } = this.props;\n        let announcementData = newApi.announcements;\n        let announcementDataKeys = Object.keys(announcementData).map(itemKey => announcementData[itemKey])\n        this.setState({ announcementData, announcementDataKeys, timeStamp: Math.floor(Date.now() / 1000), imageError: false }, () => this.announcementTimeIntervalData())\n    }\n\n    announcementTimeIntervalData = () => {\n        if (this.timeInterval)  clearInterval(this.timeInterval) \n        const { announcementDataKeys, announcementData } = this.state;\n        if (announcementDataKeys != null && announcementData != null) this.timeInterval = setIntervalFunction(() => this.onLoadAnnouncements(), 10000) \n    }\n\n\n    render() {\n        const { announcementDataKeys, timeStamp, imageError } = this.state;\n        return (\n            <React.Fragment>{\n                announcementDataKeys !== null ? announcementDataKeys.map((p, announcementKey) => {\n                    const { timeIntervalRepeatOnce, announcementTimeInterval, announcementEndTime } = AnnouncementsUtils(timeStamp, p.showAt, p.endAt, p.every, announcementKey);\n                    if (((timeIntervalRepeatOnce === 0) || (timeIntervalRepeatOnce < 10 && timeIntervalRepeatOnce >= 0)) && (timeStamp >= announcementTimeInterval)) {\n                            let mediaFile = `${CloudHostUrl}${p.mediaFile}`;\n                            if(p.mediaFile.includes('https://cloud.tagbox.com/')) mediaFile = p.mediaFile;\n                        return (\n                            <div key={announcementKey} id=\"wAnnouncementsOverLay\" style={{ display: isNaN(announcementEndTime) ? '' : timeStamp <= announcementEndTime ? '' : 'none', ...styles.wAnnouncementsOverLay }}>\n                                <div className=\"blur-bg\" style={styles.blurBg}></div>\n                                <div className=\"wAnnouncementsOverLay\" data-color=\"#000000\" data-font=\"font26\" data-fontsize=\"24px\" data-cardcolor=\"#ffffff\">\n                                    <div className=\"cstmModalPopup taggModalShow anouncementModal disModalPopup modal-text-image fade in\">\n                                        <div className=\"taggModal\" style={window.innerWidth > 768 ? { left: 0, right: 0, top: 0, margin: 0 } : {}}>\n                                            <div className=\"taggModalContent\">\n                                                {!imageError && p.mediaFile != \"\" ? <div className={`taggImageHolder centerAlign ${window.innerWidth > 768 ? `instaMainImg` : ``}`} style={p.type === 2 ? { width: `100%` } : {}}>\n                                                    <img src={mediaFile} onError={() => this.setState({ imageError: true })} className=\"img-responsive\" alt=\"\" />\n                                                </div> : null}\n                                                {(p.type === 1 || p.type === 4) ? <div className={`taggContentHolder social-icon-pos-bottom`} style={{ ...styles.backgroundWhite, position: (p.type === 2 || p.type === 4) ? 'absolute' : 'inherit', width: !imageError && p.mediaFile != \"\" ? '50%' : '100%' }}>\n                                                    <div className=\"setFont\" style={styles.setFont}>{p.description}</div>\n                                                </div> : null}\n                                            </div>\n                                        </div>\n\n                                    </div>\n                                </div>\n\n                            </div>\n                        )\n\n                    }\n                    else return null;\n                }) : null}\n            </React.Fragment>\n        )\n    }\n}"],"names":["styles","wAnnouncementsOverLay","position","zIndex","top","right","bottom","left","blurBg","backgroundWhite","backgroundColor","setFont","fontSize","color","AnnouncementsOverlayView","PureComponent","state","announcementData","announcementDataKeys","timeStamp","Math","floor","Date","now","imageError","timeInterval","onLoadAnnouncements","newApi","this","props","announcements","Object","keys","map","itemKey","setState","announcementTimeIntervalData","clearInterval","setIntervalFunction","componentDidMount","render","p","announcementKey","timeIntervalRepeatOnce","announcementTimeInterval","announcementEndTime","AnnouncementsUtils","showAt","endAt","every","mediaFile","CloudHostUrl","includes","id","style","display","isNaN","className","window","innerWidth","margin","type","width","src","onError","alt","description"],"sourceRoot":""}