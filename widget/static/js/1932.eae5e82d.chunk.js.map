{"version":3,"file":"static/js/1932.eae5e82d.chunk.js","mappings":"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","sources":["app/Themes/Elements/AnimateComp/ExbhitAnimation.js"],"sourcesContent":["import React, { PureComponent, Suspense } from \"react\";\nimport { checkMobileView, getPersonalize } from \"../../../../utils\";\nconst SwiperFalling = React.lazy(() => import(\"./SwiperFalling\"));\n\nvar ScrollInterval;\nvar heightTimeout;\nclass ExhbitAnimation extends PureComponent {\n    state = {\n        columns: [],\n        activeID: null,\n        data: [],\n        cardData: [],\n    };\n\n    componentWillMount() {\n        this.postDataFilter();\n    }\n\n    componentDidMount = () => {\n        ScrollInterval = setInterval(() => this.onUpdateTimeInterVal(), 3000);\n        heightTimeout = setTimeout(() => this.props.heightUpdate(), 1000);\n    };\n\n    onLoadData = () => {\n        const { cardData } = this.state;\n        if (cardData && cardData.length) {\n        const columns = cardData.map((item, index) => ({ id: index, referenceData: null }));\n        this.setState({ columns, data: cardData });\n        }\n    };\n\n    postDataFilter = () => {\n        let { postData, completeDataObject, wall } = this.props;\n\n        let res = [];\n        const data = postData.map(item => completeDataObject[item]);\n        const viewMobile = checkMobileView();\n        const numberOfColumn = wall.ThemeRule.numberOfCoumn;\n        const column = !wall.isEditor && viewMobile === 1 ? 2 : !wall.isEditor && viewMobile === 2 ? 3 : numberOfColumn || 5;\n\n        for (let i = 0; i < data.length; i++) {\n            const colIndex = i % column;\n            if (!res[colIndex]) {\n                res[colIndex] = [];\n            }\n            res[colIndex].push(data[i]);\n        }\n\n        for(let i=0; i< res.length; i++){\n            if(res[i].length < 3){\n                const num = 3 - res[i].length\n                for(let j=0; j < num ; j++){\n                    res[i] = [...res[i], res[Math.floor(Math.random() * res.length)][Math.floor(Math.random() * res[i].length)]]\n                }\n            }\n        }\n\n        this.setState({ cardData: res }, () => this.onLoadData());\n    };\n\n    onUpdateTimeInterVal = () => {\n        const { activeID, columns } = this.state;\n        if (activeID || activeID == 0) {\n            let ID = parseInt(activeID) + 1;\n            if (ID >= columns.length) {\n                ID = 0;\n            }\n            if (columns[ID]) {\n                this.setState({ activeID: ID });\n            }\n        } else {\n            let ID = 0;\n            if (columns[ID]) {\n                this.setState({ activeID: ID });\n            }\n        }\n    };\n\n    onUpdateRef = (index, refeData) => {\n        let { columns } = this.state;\n        if (columns && columns.length > 0 && columns[index]) columns[index].referenceData = refeData;\n        this.setState({ columns });\n    };\n\n     componentDidUpdate(prev, prevState) {\n        if (this.state.data !== prevState.data) this.onLoadData();\n\n        const { wall } = this.props\n\n        if(wall.product==0) this.props.heightUpdate()\n\n        if ((wall.isDisplay && wall.isEditor && (wall.product!= prev.wall.product || wall.id!= prev.wall.id || wall.Banner.bannerUpdate!= prev.wall.Banner.bannerUpdate || wall.Banner.banner_position!=prev.wall.Banner.banner_position || wall.BannerImage.status!=prev.wall.BannerImage.status || wall.ThemeRule.themeId!=prev.wall.ThemeRule.themeId))) {\n             this.props.heightUpdate();\n             setTimeout(() => window.dispatchEvent(new Event(\"resize\")), 1000);\n        }\n      }\n \n    CONVERT_OBJ_TO_ARRAY = (postData) => Object.values(postData).map(item => ({...item}));\n\n    componentWillUnmount() {\n       if (ScrollInterval) clearInterval(ScrollInterval);\n       if(heightTimeout) clearTimeout(heightTimeout)\n    }\n    \n\n    render() {\n        let { themeHeight, wall } = this.props;\n        const { activeID, cardData } = this.state;\n\n        return (\n          <div id=\"falling-container\" className={`tb_wall_wrap__ ${wall.ThemeRule.themeId == 64 ? `theme64 card${wall.ThemeRule.numberOfCoumn} ${wall.isDisplay ? \"display\" : \"\"}` : 'atmosphereReels69 embed'}`} style={{height: `calc(100vh - ${themeHeight+4}px)`}}>\n              {cardData && cardData.length\n                  ? cardData.map((item, index) => {\n                      return (\n                        <Suspense fallback={<></>}> \n                          <SwiperFalling\n                              {...this.props}\n                              key={`update_${index}`}\n                              pItem={this.CONVERT_OBJ_TO_ARRAY(item)}\n                              pIndex={index}\n                              postData={cardData}\n                              onUpdateRef={this.onUpdateRef}\n                              activeID={activeID} />\n                            </Suspense>  \n                      );\n                  })\n                  : null}\n          </div>\n        );\n    }\n}\n\nexport default ExhbitAnimation;"],"names":["SwiperFalling","React","ScrollInterval","heightTimeout","ExhbitAnimation","PureComponent","state","columns","activeID","data","cardData","componentDidMount","setInterval","this","onUpdateTimeInterVal","setTimeout","props","heightUpdate","onLoadData","length","map","item","index","id","referenceData","setState","postDataFilter","postData","completeDataObject","wall","res","viewMobile","checkMobileView","numberOfColumn","ThemeRule","numberOfCoumn","column","isEditor","i","colIndex","push","num","j","Math","floor","random","ID","parseInt","onUpdateRef","refeData","CONVERT_OBJ_TO_ARRAY","Object","values","componentWillMount","componentDidUpdate","prev","prevState","product","isDisplay","Banner","bannerUpdate","banner_position","BannerImage","status","themeId","window","dispatchEvent","Event","componentWillUnmount","clearInterval","clearTimeout","render","themeHeight","className","style","height","Suspense","fallback","key","pItem","pIndex"],"sourceRoot":""}