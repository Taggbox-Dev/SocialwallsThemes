{"version":3,"file":"static/js/5410.e204b3aa.chunk.js","mappings":"iNAMe,MAAMA,UAAoBC,EAAAA,UAAiB,cAAD,yBACrDC,MAAQ,CACJC,oBAAoB,EAF6B,CAIrDC,SACI,MAAM,KAAEC,EAAF,KAAQC,EAAR,YAAcC,EAAd,UAA2BC,EAA3B,SAAsCC,EAAtC,QAAgDC,GAAYC,KAAKC,OACjE,UAAEC,EAAF,gBAAaC,GAAoBR,EACjCS,EAAgBV,EAAKW,OAAS,EAAK,wBAA0B,iBAC7DC,EAA8B,IAAdZ,EAAKa,MAAcJ,EAAgBG,aAAgB,0CAA4C,GAC/GE,KAAcN,EAAUM,YAAed,EAAKe,OAAOC,aACnDC,EAAchB,EAAKQ,gBAAgBQ,YAEnCC,EAAW,CACbC,QAASX,EAAUW,QAAS,GAExBC,EAAY,CAChBC,gBAAiBb,EAAUc,UAC3BC,aAAa,GAAD,OAAKf,EAAUe,aAAf,OAGZ,OAAO,gBAAKC,GAAE,6BAAwBrB,EAAxB,YAAqCsB,SAASvB,GAAe,GAAKwB,UAAS,8BAAyBT,EAAc,gBAAkB,IAAM,UAASf,EAAa,cAA4B,GAAfA,EAAmB,EAAI,EAAGyB,MAAOT,EAAUU,IAAKvB,EAApO,UACP,iBAAKmB,GAAE,kBAAaxB,EAAKwB,IAAME,UAAU,oBAAoBC,MAAOP,EAApE,UAEIpB,EAAK6B,MAAO,SAAC,IAAD,CAAOC,SAAU9B,EAAMC,KAAMA,EAAM8B,cAAe3B,IAAe,MAE9EI,EAAUwB,iBAAmBxB,EAAUyB,aAAenB,GAAcN,EAAU0B,UAAalC,EAAKmC,QAAQX,IAAMhB,EAAU4B,eACzH,gBAAKV,UAAY1B,EAAKmC,QAAQX,IAAMhB,EAAU4B,cAAiB5B,EAAUM,WAAzD,0BAAmG,GAAIa,MAAO,CAACR,QAASX,EAAU6B,QAAV,UAAsB7B,EAAU6B,QAAhC,MAA6C,QAArL,UACE,gBAAKX,UAAU,2BAAf,UAEG,iBAAKA,UAAWlB,EAAUM,YAAcN,EAAU4B,cAAgB5B,EAAU0B,SAA5D,yBAAkG,GAAlH,UAGMpB,GAAcN,EAAU0B,UAAalC,EAAKmC,QAAQX,IAAMhB,EAAU4B,cAC7D,SAAC,IAAD,CAAeE,SAAUtC,EAAMQ,UAAWA,IAAgB,KAG9DA,EAAUyB,YAAiL,MAAnK,SAAC,IAAD,CAAahC,KAAMA,EAAoBD,KAAMA,EAAMU,aAAY,UAAKA,EAAL,YAAqBE,GAAiBJ,UAAWA,EAAW+B,gBAAiB9B,GAA9GT,EAAKwB,WAKpE,MAGFvB,EAAKuC,WAAavB,GACnB,mBAAC,IAAD,CAAuBwB,QAAO,EAAMC,OAAO1C,EAAKwB,GAAImB,eAAgB,GAAIC,WAAY3C,EAAK4C,WAAYC,OAAQ7C,EAAK8C,KAAMC,iBAAkBhD,EAAKgD,iBAAkBR,UAAWvC,EAAKuC,UAAWvB,YAAaA,EAAagC,kBAAmBhD,EAAKQ,gBAAgBwC,kBAAoBC,IAAMC,KAAKC,SAAWpD,EAAKwB,KAAS,SAI/T,E","sources":["app/Themes/Elements/AnimateComp/FallingCard.js"],"sourcesContent":["import React from \"react\"\nimport Media from \"../../Elements/Media\";\nimport AuthorDetails from \"../AuthorDetails\";\nimport PostContent from \"../PostContent/PostContentDisplay\";\nimport InteractiveEmoji from \"../InteractiveEmoji\";\n\nexport default class FallingCard extends React.Component {\n    state = {\n        isAuthorImagevalid: true\n    }\n    render() {\n        const { item, wall, activeIndex, columnsId, autoplay, cardRef } = this.props;\n        const { ThemeRule, Personalization } = wall;\n        const contentClass = (item.rating > 0) ? 'tb_mwf_rating_content' : 'tb_mwf_content'\n        const textDecorate = (item.type === 1 && Personalization.textDecorate) ? 'tb_mwf_text_decoration tb_mwf_text_post' : ''; \n        const postAuthor = (ThemeRule.postAuthor && !item.author.isInstaUser) ? true : false;\n        const interactive = wall.Personalization.interactive;\n\n        const cardSize = {\n            padding: ThemeRule.padding/ 2\n         };\n          const cardStyle = {\n            backgroundColor: ThemeRule.cardColor,\n            borderRadius: `${ThemeRule.borderRadius}px`, \n          };\n\n            return <div id={`tb_wall_card_wrap__${columnsId}_${parseInt(activeIndex) + 1}`} className={`tb_wall_card_wrap__ ${interactive ? 'intractive_on' : ''}`} data-id={activeIndex} data-active={activeIndex == 0 ? 1 : 0} style={cardSize} ref={cardRef}>\n            <div id={`post_id-${item.id}`} className=\"tb_wall_card_in__\" style={cardStyle}>\n\n              { item.file ? <Media itemData={item} wall={wall} autoplayVideo={autoplay} /> : null }\n\n            { !ThemeRule.captionStatus && (!ThemeRule.hideContent || postAuthor || ThemeRule.postTime || (item.network.id && ThemeRule.socialAction))  ?\n              <div className={(item.network.id && ThemeRule.socialAction) || ThemeRule.postAuthor  ? `tb_wall_card_content___` : ''} style={{padding: ThemeRule.spacing ?`${ThemeRule.spacing}px`: '10px'}}>\n                <div className=\"tb_wall_card_conent__001\">\n\n                   <div className={ThemeRule.postAuthor || ThemeRule.socialAction || ThemeRule.postTime ? `tb_mwf_contant_wrapper` : ''}>\n                      \n                      {\n                        (postAuthor || ThemeRule.postTime || (item.network.id && ThemeRule.socialAction) ) ?  \n                              <AuthorDetails postData={item} ThemeRule={ThemeRule} /> : null\n                        }\n\n                        {!ThemeRule.hideContent ? <PostContent wall={wall} key={item.id} item={item} contentClass={`${contentClass} ${textDecorate}`}  ThemeRule={ThemeRule} personalization={Personalization}  /> : null}\n                    </div> \n                  </div>\n                </div>\n                \n               : null\n            }\n            {\n              !wall.isDisplay && interactive ? \n              <InteractiveEmoji {...{isCard:true, postId:item.id, intractiveData: [], userDetail: wall.UserDetail, wallId: wall.Wall, interactiveCount: item.interactiveCount, isDisplay: wall.isDisplay, interactive: interactive, interactiveStatus: wall.Personalization.interactiveStatus}} key={(Math.random() * item.id)}/> : null\n            }\n            </div>\n        </div>\n    }\n\n}"],"names":["FallingCard","React","state","isAuthorImagevalid","render","item","wall","activeIndex","columnsId","autoplay","cardRef","this","props","ThemeRule","Personalization","contentClass","rating","textDecorate","type","postAuthor","author","isInstaUser","interactive","cardSize","padding","cardStyle","backgroundColor","cardColor","borderRadius","id","parseInt","className","style","ref","file","itemData","autoplayVideo","captionStatus","hideContent","postTime","network","socialAction","spacing","postData","personalization","isDisplay","isCard","postId","intractiveData","userDetail","UserDetail","wallId","Wall","interactiveCount","interactiveStatus","key","Math","random"],"sourceRoot":""}