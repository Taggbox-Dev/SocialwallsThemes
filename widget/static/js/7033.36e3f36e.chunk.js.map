{"version":3,"file":"static/js/7033.36e3f36e.chunk.js","mappings":"qMAIe,MAAMA,UAAoBC,EAAAA,cACvCC,SACE,MAAM,aAAEC,EAAF,QAAgBC,EAAhB,UAAyBC,EAAzB,KAAoCC,EAApC,gBAA0CC,EAA1C,KAA2DC,EAA3D,aAAiEC,GAAiBC,KAAKC,MAC7F,IAAIC,EAAiC,IAAnBJ,EAAKK,QAAQC,GAAWV,GAAUW,EAAAA,EAAAA,IAAsBX,GAE1E,OADuB,IAAnBI,EAAKK,QAAQC,KAAUF,GAAcI,EAAAA,EAAAA,IAAgBJ,KAEvD,iBAAKK,UAAS,UAAKd,EAAL,wBAAiCE,EAAUa,cAAgBC,MAAO,CAAEC,WAAYf,EAAUgB,SAAUC,SAAUhB,EAAKiB,SAAUC,MAAOlB,EAAKmB,WAAvJ,UACGhB,GAAe,gBAAKQ,UAAU,gBAAf,UAAgCD,EAAAA,EAAAA,IAAgBP,KAAuB,MACvF,UAAC,EAAAiB,SAAD,CAAUC,UAAU,wBAApB,eAA4B,SAAC,IAAD,CAAuBC,KAAMpB,EAAwBJ,QAASQ,EAAaiB,gBAAiBtB,GAApDK,QAGzE,E,gGCZH,MAAMkB,EAAqBC,EAAQ,OAC7BC,EAAoB,CAACJ,EAAKvB,KACrB,SAAC,UAAD,CAASc,MAAQd,GAAa,CAAC,GAAG,IAAI4B,SAAR,OAAiB5B,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAW6B,SAAW,CAAEC,MAAS9B,EAAUiB,SAAWc,OAAU/B,EAAUiB,UAAc,KAAvI,UAA8IN,EAAAA,EAAAA,IAAgBY,KAEnKS,EAAsB,IAAoD,IAAnD,KAAET,EAAF,QAAQxB,EAAR,gBAAiByB,EAAjB,UAAkCxB,GAAgB,EAE3E,MAAMiC,EAAoB,CACtBd,MAAOK,EAAgBU,cACvBC,WAAY,OACZC,gBAA8D,GAA7CZ,EAAgBa,0BAAiCb,EAAgBc,yBAA2B,eAGjH,OAA0B,IAAnBf,EAAKf,QAAQC,IAAY8B,OAAOC,WAAY,8BACR,IAAtChB,EAAgBiB,mBACoB,IAAjCjB,EAAgBkB,cACgB,IAAhClB,EAAgBmB,aACdhC,EAAAA,EAAAA,IAAgBZ,GACsB,IAAtCyB,EAAgBiB,mBACmB,IAAjCjB,EAAgBkB,cACgB,IAAhClB,EAAgBmB,YACdhB,EAAkBY,OAAOC,UAAUI,MAAMnB,EACvC1B,EACA,WACA,CAAC8C,EAAOC,KACJ,oBAAQlC,UAAU,kBAAkBE,MAAOmB,EAA3C,cACMY,OAGXtB,EAAKwB,aAAa/C,GACmB,IAAtCwB,EAAgBiB,mBACmB,IAAjCjB,EAAgBkB,cACgB,IAAhClB,EAAgBmB,YACdhB,EAAkBY,OAAOC,UAAUI,MAAMnB,EACvC1B,EACAwB,EAAKyB,KAAKC,YACV,CAACJ,EAAOC,KACJ,mBAAQlC,UAAU,kBAAkBE,MAAOmB,EAA3C,SACKY,MAGVtB,EAAKwB,aAAa/C,GACmB,IAAtCwB,EAAgBiB,mBACmB,IAAjCjB,EAAgBkB,cACgB,IAAhClB,EAAgBmB,YACdhB,EAAkBY,OAAOC,UAAUI,MAAMnB,EACvC1B,EACA,WACA,CAAC8C,EAAOC,KACJ,oBAAgBlC,UAAU,kBAAkBE,MAAOmB,EAAnD,cACMY,IADOC,KAIlBvB,EAAKwB,aAAa/C,GACnB2B,EAAkBY,OAAOC,UAAUI,MAAM7C,EAASwB,EAAKwB,aAAa/C,MACpF,8BAEqC,IAAtCwB,EAAgBiB,mBACoB,IAAjCjB,EAAgBkB,cACgB,IAAhClB,EAAgBmB,aACdhC,EAAAA,EAAAA,IAAgBZ,GACsB,IAAtCyB,EAAgBiB,mBACmB,IAAjCjB,EAAgBkB,cACgB,IAAhClB,EAAgBmB,YACdlB,GACEd,EAAAA,EAAAA,IAAgBZ,GAChB,WACA,CAAC8C,EAAOC,KACJ,oBAAQlC,UAAU,kBAAkBE,MAAOmB,EAA3C,cACMY,OAI0B,IAAtCrB,EAAgBiB,mBACmB,IAAjCjB,EAAgBkB,cACgB,IAAhClB,EAAgBmB,YACdlB,GACEd,EAAAA,EAAAA,IAAgBZ,GAChBwB,EAAKyB,KAAKC,YACV,CAACJ,EAAOC,KACJ,mBAAQlC,UAAU,kBAAkBE,MAAOmB,EAA3C,SACKY,MAI2B,IAAtCrB,EAAgBiB,mBACmB,IAAjCjB,EAAgBkB,cACgB,IAAhClB,EAAgBmB,YACdlB,GACEd,EAAAA,EAAAA,IAAgBZ,GAChB,WACA,CAAC8C,EAAOC,KACJ,oBAAgBlC,UAAU,kBAAkBE,MAAOmB,EAAnD,cACMY,IADOC,KAKnBnB,EAAkB5B,EAAQC,IApFhD,EAwFJ,GAAekD,EAAAA,EAAAA,MAAKlB,E","sources":["app/Themes/Elements/PostContent/PostContent.js","app/Themes/Elements/PostContent/PostContentConvertion.js"],"sourcesContent":["import React, { PureComponent, Suspense } from \"react\";\nimport ReactHtmlParser from 'react-html-parser';\nimport { STRING_TO_URL_CONVERT } from '../../../../utils'\nimport PostContentConvertion from \"./PostContentConvertion\";\nexport default class PostContent extends PureComponent {\n  render() {\n    const { contentClass, content, ThemeRule, font, personalization, item, contentTitle } = this.props;\n    let contentData = item.network.id == 20 ? content : STRING_TO_URL_CONVERT(content);\n    if (item.network.id == 12) contentData = ReactHtmlParser(contentData);  \n    return (\n      <div className={`${contentClass} tb-cTBfont- ${ThemeRule.font_varient}`} style={{ fontFamily: ThemeRule.css_font, fontSize: font.fontsize, color: font.fontColor }}>\n        {contentTitle ? <div className=\"tb_bold_txt__\">{ReactHtmlParser(contentTitle)}</div> : null}\n        <Suspense fallback={<></>}> <PostContentConvertion data={item} key={contentData} content={contentData} Personalization={personalization} /></Suspense>\n      </div>\n    );\n  }\n}","import React, { memo } from \"react\";\nimport Emojify from 'react-emojione';\nimport ReactHtmlParser from 'react-html-parser';\nconst reactStringReplace = require(\"react-string-replace\");\nconst convertSlackEmoji = (data,ThemeRule) => {\n    return <Emojify style={ ThemeRule && [66,70].includes(ThemeRule?.themeId) ? { width : (ThemeRule.fontSize), height : (ThemeRule.fontSize) } : null}>{ReactHtmlParser(data)}</Emojify>\n}\nconst ContentWithOutSlack = ({ data, content, Personalization, ThemeRule }) => {\n\n    const customHasTagStyle = {\n        color: Personalization.hashtag_color,\n        fontWeight: \"bold\",\n        backgroundColor: Personalization.hashtag_background_status == 1 ? Personalization.hashtag_background_color : 'transparent'\n    }\n\n    return data.network.id == 20 && window.slackdown ? <>\n        {Personalization.hashtag_highlight === 1 &&\n            Personalization.hashtag_feed === 0 &&\n            Personalization.hashtag_all === 0\n            ? ReactHtmlParser(content)\n            : Personalization.hashtag_highlight === 1 &&\n                Personalization.hashtag_feed === 0 &&\n                Personalization.hashtag_all === 1\n                ? convertSlackEmoji(window.slackdown.parse(reactStringReplace(\n                    content,\n                    /#(\\w+)/g,\n                    (match, i) => (\n                        <strong className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                            #{match}\n                        </strong>\n                    )\n                ), data.slackMember),ThemeRule)\n                : Personalization.hashtag_highlight === 1 &&\n                    Personalization.hashtag_feed === 1 &&\n                    Personalization.hashtag_all === 0\n                    ? convertSlackEmoji(window.slackdown.parse(reactStringReplace(\n                        content,\n                        data.hash.hashString,\n                        (match, i) => (\n                            <strong className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                                {match}\n                            </strong>\n                        )\n                    ), data.slackMember),ThemeRule)\n                    : Personalization.hashtag_highlight === 1 &&\n                        Personalization.hashtag_feed === 1 &&\n                        Personalization.hashtag_all === 1\n                        ? convertSlackEmoji(window.slackdown.parse(reactStringReplace(\n                            content,\n                            /#(\\w+)/g,\n                            (match, i) => (\n                                <strong key={i} className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                                    #{match}\n                                </strong>\n                            )\n                        ), data.slackMember),ThemeRule)\n                        : convertSlackEmoji(window.slackdown.parse(content, data.slackMember),ThemeRule)}\n    </> : <>\n\n        {Personalization.hashtag_highlight === 1 &&\n            Personalization.hashtag_feed === 0 &&\n            Personalization.hashtag_all === 0\n            ? ReactHtmlParser(content)\n            : Personalization.hashtag_highlight === 1 &&\n                Personalization.hashtag_feed === 0 &&\n                Personalization.hashtag_all === 1\n                ? reactStringReplace(\n                    ReactHtmlParser(content),\n                    /#(\\w+)/g,\n                    (match, i) => (\n                        <strong className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                            #{match}\n                        </strong>\n                    )\n                )\n                : Personalization.hashtag_highlight === 1 &&\n                    Personalization.hashtag_feed === 1 &&\n                    Personalization.hashtag_all === 0\n                    ? reactStringReplace(\n                        ReactHtmlParser(content),\n                        data.hash.hashString,\n                        (match, i) => (\n                            <strong className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                                {match}\n                            </strong>\n                        )\n                    )\n                    : Personalization.hashtag_highlight === 1 &&\n                        Personalization.hashtag_feed === 1 &&\n                        Personalization.hashtag_all === 1\n                        ? reactStringReplace(\n                            ReactHtmlParser(content),\n                            /#(\\w+)/g,\n                            (match, i) => (\n                                <strong key={i} className=\"tb_text_hashtag\" style={customHasTagStyle}>\n                                    #{match}\n                                </strong>\n                            )\n                        )\n                        : convertSlackEmoji(content,ThemeRule)}\n    </>\n}\n\nexport default memo(ContentWithOutSlack);"],"names":["PostContent","PureComponent","render","contentClass","content","ThemeRule","font","personalization","item","contentTitle","this","props","contentData","network","id","STRING_TO_URL_CONVERT","ReactHtmlParser","className","font_varient","style","fontFamily","css_font","fontSize","fontsize","color","fontColor","Suspense","fallback","data","Personalization","reactStringReplace","require","convertSlackEmoji","includes","themeId","width","height","ContentWithOutSlack","customHasTagStyle","hashtag_color","fontWeight","backgroundColor","hashtag_background_status","hashtag_background_color","window","slackdown","hashtag_highlight","hashtag_feed","hashtag_all","parse","match","i","slackMember","hash","hashString","memo"],"sourceRoot":""}