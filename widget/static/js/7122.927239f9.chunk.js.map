{"version":3,"file":"static/js/7122.927239f9.chunk.js","mappings":"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","sources":["app/Themes/Elements/AnimateComp/SwiperFalling.js","app/Themes/Elements/Observer.js"],"sourcesContent":["import React, { Component, Suspense } from \"react\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport { withData } from \"../Observer\";\nconst FallingCard = React.lazy(() => import(\"./FallingCard\"));\n\nclass SwiperFalling extends Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n     }\n \n\n    componentWillReceiveProps(nextProps) {\n        const { activeID, pIndex } = nextProps;\n        if (activeID == pIndex && this.myRef.current && this.props.activeID !== activeID) {\n            this.myRef.current.swiper.slideNext();\n        } \n    }\n\n    onUpdate = () => {\n        const { pIndex } = this.props;\n        setTimeout(() => {\n          this.props.onUpdateRef(pIndex, null);\n          window.dispatchEvent(new Event(\"resize\"));\n          setTimeout(() => {\n            const tb_wall_list_wrap =  document.getElementById(`tb_wall_list_wrap___${pIndex + 1}`);\n            \n            \n            if(tb_wall_list_wrap) tb_wall_list_wrap.classList.add(\"tb_fc_animation\");\n          }, 250);\n        }, 100);\n      };\n\n\n    render() {\n        const { pItem, pIndex, postData, wall } = this.props;\n        const HocCard =  wall.displayEmbed ? FallingCard : withData(FallingCard);\n\n        return (\n            <Swiper\n                ref={this.myRef}\n                slidesPerView={\"auto\"}\n                direction={\"vertical\"}\n                spaceBetween={0}\n                mousewheel={true}\n                loop={true}\n                speed={2000}\n                allowTouchMove={false}\n                autoplay={{ enabled: false, disableOnInteraction: true }}\n                id={`tb_wall_list_wrap___${pIndex + 1}`}\n                className=\"swiper-container tb_wall_list_wrap___\"\n                key={`tb_wall_list_wrap___${pIndex + 1}`}\n                style={{ width: `${100 / postData.length}%` }}\n                onAfterInit={this.onUpdate}\n                >\n                {pItem && pItem.map((item, index) => {\n                    return (wall.ThemeRule.themeId==64 || (item.file && wall.ThemeRule.themeId==69)) && <SwiperSlide key={`item_${index}_${pIndex}`}>\n                     <Suspense>\n                          <HocCard columnsId={index} activeIndex={index} key={index} item={item} wall={wall} itemData={item} />\n                      </Suspense>   \n                    </SwiperSlide>\n                })}\n            </Swiper>\n        );\n    }\n}\n\nexport default SwiperFalling;","import React from \"react\";\nimport { isOldBrowser } from \"../../../utils\";\n\nexport function withData(WrappedComponent) {\n    return class extends React.Component {\n        cardRef = React.createRef(null);\n        constructor(props) {\n            super(props);\n            this.state = { autoplay : false };\n        }\n        \n\n      startLoadingVideo = (ref) => {\n        const { itemData, wall } = this.props;\n\n        if(wall && wall.ThemeRule && Object.keys(wall.ThemeRule).length > 0 && itemData.type == 3 || itemData.type == 5){\n          const themeId = wall.ThemeRule.themeId;\n          const newBrower = !isOldBrowser();\n          try {\n            if(newBrower && window.innerWidth > 920 && themeId && [62, 63, 64, 65, 66, 69, 70, 73].includes(parseInt(themeId))){\n              let observer = new IntersectionObserver(entries => {\n                entries.forEach(entry => {\n                    if (entry.isIntersecting) this.setState({ autoplay: true }); \n                    else this.setState({ autoplay: false });\n                });\n              },{ rootMargin: \"50px\", threshold: 1.0 });\n              if (ref.current) observer.observe(ref.current);\n      \n            }else this.setState({ autoplay: true });\n          } catch (error) {\n            this.setState({ autoplay: true });\n          }\n        }\n      }\n    \n    componentDidMount(){\n       this.startLoadingVideo(this.cardRef);\n     }\n      \n      render() {\n        // Pass the data to the wrapped component\n        return <WrappedComponent {...this.state} {...this.props} cardRef={this.cardRef} />;\n      }\n    };\n  }"],"names":["FallingCard","React","SwiperFalling","Component","constructor","props","super","onUpdate","pIndex","this","setTimeout","onUpdateRef","window","dispatchEvent","Event","tb_wall_list_wrap","document","getElementById","classList","add","myRef","componentWillReceiveProps","nextProps","activeID","current","swiper","slideNext","render","pItem","postData","wall","HocCard","displayEmbed","withData","ref","slidesPerView","direction","spaceBetween","mousewheel","loop","speed","allowTouchMove","autoplay","enabled","disableOnInteraction","id","className","style","width","length","onAfterInit","map","item","index","ThemeRule","themeId","file","Suspense","columnsId","activeIndex","itemData","WrappedComponent","cardRef","startLoadingVideo","Object","keys","type","newBrower","isOldBrowser","innerWidth","includes","parseInt","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","setState","rootMargin","threshold","observe","error","state","componentDidMount"],"sourceRoot":""}